import mongodb
import telebot
import random

from pyowm import OWM
from telebot import types
from bittrex import BittrexClient
from additional.private_data import token
from additional.data import *

owm = OWM('4136767328e7320b9b54e9f338b8cd38')
mgr = owm.weather_manager()
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞')
    button2 = types.KeyboardButton('–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø')
    button3 = types.KeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø ‚ôë')
    button4 = types.KeyboardButton('–ê–¥–ºi–Ω–∫–∞ üëë')
    markup.add(button2)
    markup.add(button3)
    markup.add(button1, button4)
    bot.send_message(message.chat.id, "<b>–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫i –±—É–ª–∏, {0.first_name}!</b> \n"
                                      "–ù–∏–∂—á–µ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –∫–Ω–æ–∫–ø—ñ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º.\n"
                                      "–Ø–∫—â–æ –∑'—è–≤–∏–ª–∏—Å—è –ø—Ä–æ–±–ª–µ–º–∏ - / help".format(
        message.from_user), reply_markup=markup, parse_mode='html')
    mongodb.check_and_add_user(message)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "–í–∏–±–∏—Ä–∞–π, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:\n–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n–ü–æ–≥–æ–¥–∞ –≤ –û–¥–µ—Å—ñ"
                                      "\n–ù—É –∞ —è–∫—â–æ —Ç–∏ –∞–¥–º—ñ–Ω, —Ç–æ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö "
                                      "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
                                      "\n\n–ù–µ –≤–∏—Ö–æ–¥–∏—Ç—å? —Å–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ/start")


@bot.message_handler(content_types=['text'])
def text(message):
    if message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø':
        markup = types.InlineKeyboardMarkup(row_width=3)
        item1 = types.InlineKeyboardButton('–ö—É—Ä—Å —Ç–æ–ø–æ–≤–∏—Ö –∫—Ä—ñ–ø—Ç–æ–º–æ–Ω–µ—Ç', callback_data='course')
        item2 = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç –Ω–∞Bittrex', callback_data='crypto_list')
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', reply_markup=markup)

    elif message.text == '–ì–æ—Ä–æ—Å–∫–æ–ø ‚ôë':
        markup = types.InlineKeyboardMarkup(row_width=8)
        item1 = types.InlineKeyboardButton('–û–≤–µ–Ω (21 –±–µ—Ä–µ–∑–Ω—è - 20 –∫–≤—ñ—Ç–Ω—è)', callback_data='horo')
        item2 = types.InlineKeyboardButton('–¢–µ–ª–µ—Ü—å (21 –∫–≤—ñ—Ç–Ω—è - 21 —Ç—Ä–∞–≤–Ω—è)', callback_data='horo')
        item3 = types.InlineKeyboardButton('–ë–ª–∏–∑–Ω—é–∫–∏ (22 —Ç—Ä–∞–≤–Ω—è - 21 —á–µ—Ä–≤–Ω—è)', callback_data='horo')
        item4 = types.InlineKeyboardButton('–†–∞–∫ (22 —á–µ—Ä–≤–Ω—è - 22 –ª–∏–ø–Ω—è)', callback_data='horo')
        item5 = types.InlineKeyboardButton('–õ–µ–≤ (23 –ª–∏–ø–Ω—è - 21 —Å–µ—Ä–ø–Ω—è)', callback_data='horo')
        item6 = types.InlineKeyboardButton('–î—ñ–≤–∞ (22 —Å–µ—Ä–ø–Ω—è - 23 –≤–µ—Ä–µ—Å–Ω—è)', callback_data='horo')
        item7 = types.InlineKeyboardButton('–¢–µ—Ä–µ–∑–∏ (24 –≤–µ—Ä–µ—Å–Ω—è - 23 –∂–æ–≤—Ç–Ω—è)', callback_data='horo')
        item8 = types.InlineKeyboardButton('–°–∫–æ—Ä–ø—ñ–æ–Ω (24 –∂–æ–≤—Ç–Ω—è - 23 –ª–∏—Å—Ç–æ–ø–∞–¥–∞)', callback_data='horo')
        item9 = types.InlineKeyboardButton('–°—Ç—Ä—ñ–ª–µ—Ü—å (24 –ª–∏—Å—Ç–æ–ø–∞–¥–∞ - 22 –≥—Ä—É–¥–Ω—è)', callback_data='horo')
        item10 = types.InlineKeyboardButton('–ö–æ–∑–µ—Ä—ñ–≥ (23 –≥—Ä—É–¥–Ω—è - 20 —Å—ñ—á–Ω—è)', callback_data='horo')
        item11 = types.InlineKeyboardButton('–í–æ–¥–æ–ª—ñ–π (21 —Å—ñ—á–Ω—è - 19 –ª—é—Ç–æ–≥–æ)', callback_data='horo')
        item12 = types.InlineKeyboardButton('–†–∏–±–∏ (20 –ª—é—Ç–æ–≥–æ - 20 –±–µ—Ä–µ–∑–Ω—è)', callback_data='horo')
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        markup.add(item7)
        markup.add(item8)
        markup.add(item9)
        markup.add(item10)
        markup.add(item11)
        markup.add(item12)
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –∑–æ–æ–¥—ñ–∞–∫:', reply_markup=markup)

    elif message.text == '–ê–¥–ºi–Ω–∫–∞ üëë':
        bot.send_message(message.chat.id, mongodb.get_all_users(message))

    elif message.text == '–ü–æ–≥–æ–¥–∞':
        observation = mgr.weather_at_place('Odessa, Ukraine')
        w = observation.weather
        temp = w.temperature('celsius')["temp"]
        pogoda = w.detailed_status
        bot.send_message(message.chat.id, "–ó–∞—Ä–∞–∑ –≤ " + "–û–¥–µ—Åi" + " " + pogoda)
        bot.send_message(message.chat.id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞—Ä–∞–∑ –≤ –ø—Ä–∏–±–ª–∏–∑–Ω–æ " + str(temp))
        if temp < 0:
            bot.send_message(message.chat.id, "–ó–∞—Ä–∞–∑ —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥—è–≥–∞–π—Ç–µ—Å—è —Ç–µ–ø–ª—ñ—à–µ")
        elif temp < 10:
            bot.send_message(message.chat.id, "–î–æ—Å–∏—Ç—å –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ, –∫—É—Ä—Ç–∫–∞ —Ç–æ—á–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞")
        elif temp < 20:
            bot.send_message(message.chat.id, "–î–æ—Å–∏—Ç—å —Ç–µ–ø–ª–æ, –∫—É—Ä—Ç–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞")
        else:
            bot.send_message(message.chat.id, "–ù–∞ –≤—É–ª–∏—Ü—ñ —Å–ø–µ–∫–∞ - —Å–∞–º–µ —á–∞—Å –ø—ñ—Ç–∏ –Ω–∞ –º–æ—Ä–µ")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    client = BittrexClient()
    try:
        if call.message:
            if call.data == 'course':
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton('Ethereum', callback_data='eth')
                item2 = types.InlineKeyboardButton('Bitcoin', callback_data='btc')
                item3 = types.InlineKeyboardButton('ADA', callback_data='ada')
                item4 = types.InlineKeyboardButton('Ripple', callback_data='xrp')
                item5 = types.InlineKeyboardButton('Dogecoin', callback_data='doge')
                item6 = types.InlineKeyboardButton('Litecoin', callback_data='ltc')
                item7 = types.InlineKeyboardButton('ATOM', callback_data='atom')
                markup.add(item1)
                markup.add(item2)
                markup.add(item3)
                markup.add(item4)
                markup.add(item5)
                markup.add(item6)
                markup.add(item7)
                bot.send_message(call.message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', reply_markup=markup)

            elif call.data == 'crypto_list':
                bot.send_message(call.message.chat.id, client.get_all_names())

            elif call.data == 'eth':
                current_price = client.get_last_price(pair=ETH)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(ETH, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'btc':
                current_price = client.get_last_price(pair=BTC)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(BTC, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'xrp':
                current_price = client.get_last_price(pair=XRP)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(XRP, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'ada':
                current_price = client.get_last_price(pair=ADA)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(ADA, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'doge':
                current_price = client.get_last_price(pair=DOGE)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(DOGE, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'atom':
                current_price = client.get_last_price(pair=ATOM)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(ATOM, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'ltc':
                current_price = client.get_last_price(pair=LTC)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç–∏:\n\n{} = {}$".format(LTC, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'horo':
                horoskope = random.choice(first) + '' \
                            + random.choice(second) + '' + random.choice(
                    second_add) + '' + random.choice(third)
                bot.send_message(call.message.chat.id, horoskope)

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
