import mongodb
import telebot

from pyowm import OWM
from telebot import types
from bittrex import BittrexClient
from additional.private_data import token
from additional.data import *

owm = OWM('4136767328e7320b9b54e9f338b8cd38')
mgr = owm.weather_manager()
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞')
    button2 = types.KeyboardButton('–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø')
    button3 = types.KeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø ‚ôë')
    button4 = types.KeyboardButton('–ê–¥–º–∏–Ω–∫–∞ üëë')
    markup.add(button2)
    markup.add(button3)
    markup.add(button1, button4)
    bot.send_message(message.chat.id, "<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {0.first_name}!</b>\n"
                                      "–ù–∏–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–Ω–æ–∫–ø–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
                                      "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã - /help".format(
        message.from_user), reply_markup=markup, parse_mode='html')
    mongodb.check_and_add_user(message)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n–ü–æ–≥–æ–¥–∞ –≤ –û–¥–µ—Å—Å–µ"
                                      "\n–ù—É –∞ –µ—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω, —Ç–æ –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
                                      " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                                      "\n\n–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ /start")


@bot.message_handler(content_types=['text'])
def text(message):
    if message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø':
        markup = types.InlineKeyboardMarkup(row_width=3)
        item1 = types.InlineKeyboardButton('–ö—É—Ä—Å —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç', callback_data='course')
        item2 = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ Bittrex', callback_data='crypto_list')
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=markup)

    elif message.text == '–ì–æ—Ä–æ—Å–∫–æ–ø ‚ôë':
        print('TYT')
        markup = types.InlineKeyboardMarkup(row_width=8)
        item1 = types.InlineKeyboardButton('–û–≤–µ–Ω (21 –º–∞—Ä—Ç–∞ ‚Äì 20 –∞–ø—Ä–µ–ª—è)', callback_data='ove')
        item2 = types.InlineKeyboardButton('–¢–µ–ª–µ—Ü (21 –∞–ø—Ä–µ–ª—è ‚Äì 21 –º–∞—è)', callback_data='tel')
        item3 = types.InlineKeyboardButton('–ë–ª–∏–∑–Ω–µ—Ü—ã (22 –º–∞—è ‚Äì 21 –∏—é–Ω—è)', callback_data='bli')
        item4 = types.InlineKeyboardButton('–†–∞–∫ (22 –∏—é–Ω—è ‚Äì 22 –∏—é–ª—è)', callback_data='rak')
        item5 = types.InlineKeyboardButton('–õ–µ–≤ (23 –∏—é–ª—è ‚Äì 21 –∞–≤–≥—É—Å—Ç–∞)', callback_data='lev')
        item6 = types.InlineKeyboardButton('–î–µ–≤–∞ (22 –∞–≤–≥—É—Å—Ç–∞ ‚Äì 23 —Å–µ–Ω—Ç—è–±—Ä—è)', callback_data='dev')
        item7 = types.InlineKeyboardButton('–í–µ—Å—ã (24 —Å–µ–Ω—Ç—è–±—Ä—è ‚Äì 23 –æ–∫—Ç—è–±—Ä—è)', callback_data='ves')
        item8 = types.InlineKeyboardButton('–°–∫–æ—Ä–ø–∏–æ–Ω (24 –æ–∫—Ç—è–±—Ä—è ‚Äì 23 –Ω–æ—è–±—Ä—è)', callback_data='sco')
        item9 = types.InlineKeyboardButton('–°—Ç—Ä–µ–ª–µ—Ü (24 –Ω–æ—è–±—Ä—è ‚Äì 22 –¥–µ–∫–∞–±—Ä—è)', callback_data='str')
        item10 = types.InlineKeyboardButton('–ö–æ–∑–µ—Ä–æ–≥ (23 –¥–µ–∫–∞–±—Ä—è ‚Äì 20 —è–Ω–≤–∞—Ä—è)', callback_data='koz')
        item11 = types.InlineKeyboardButton('–í–æ–¥–æ–ª–µ–π (21 —è–Ω–≤–∞—Ä—è ‚Äì 19 —Ñ–µ–≤—Ä–∞–ª—è)', callback_data='vod')
        item12 = types.InlineKeyboardButton('–†—ã–±—ã (20 —Ñ–µ–≤—Ä–∞–ª—è ‚Äì 20 –º–∞—Ä—Ç–∞))', callback_data='rib')
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        markup.add(item7)
        markup.add(item8)
        markup.add(item9)
        markup.add(item10)
        markup.add(item11)
        markup.add(item12)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–æ–æ–¥–∏–∞–∫:', reply_markup=markup)

    elif message.text == '–ê–¥–º–∏–Ω–∫–∞ üëë':
        bot.send_message(message.chat.id, mongodb.get_all_users(message))

    elif message.text == '–ü–æ–≥–æ–¥–∞':
        observation = mgr.weather_at_place('Odessa, Ukraine')
        w = observation.weather
        temp = w.temperature('celsius')["temp"]
        pogoda = w.detailed_status
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –≤ " + "–û–¥–µ—Å—Å–µ" + " " + pogoda)
        bot.send_message(message.chat.id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å –≤ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ " + str(temp))
        if temp < 0:
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ")
        elif temp < 10:
            bot.send_message(message.chat.id, "–î–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –∫—É—Ä—Ç–∫–∞ —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–∞")
        elif temp < 20:
            bot.send_message(message.chat.id, "–î–æ–≤–æ–ª—å–Ω–æ —Ç–µ–ø–ª–æ, –∫—É—Ä—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
        else:
            bot.send_message(message.chat.id, "–ù–∞ —É–ª–∏—Ü–µ –∂–∞—Ä–∞ - —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–π—Ç–∏ –Ω–∞ –º–æ—Ä–µ)")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    client = BittrexClient()
    try:
        if call.message:
            if call.data == 'course':
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton('Ethereum', callback_data='eth')
                item2 = types.InlineKeyboardButton('Bitcoin', callback_data='btc')
                item3 = types.InlineKeyboardButton('ADA', callback_data='ada')
                item4 = types.InlineKeyboardButton('Ripple', callback_data='xrp')
                item5 = types.InlineKeyboardButton('Dogecoin', callback_data='doge')
                item6 = types.InlineKeyboardButton('Litecoin', callback_data='ltc')
                item7 = types.InlineKeyboardButton('ATOM', callback_data='atom')
                markup.add(item1)
                markup.add(item2)
                markup.add(item3)
                markup.add(item4)
                markup.add(item5)
                markup.add(item6)
                markup.add(item7)
                bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=markup)

            elif call.data == 'crypto_list':
                bot.send_message(call.message.chat.id, client.get_all_names())

            elif call.data == 'eth':
                current_price = client.get_last_price(pair=ETH)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(ETH, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'btc':
                current_price = client.get_last_price(pair=BTC)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(BTC, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'xrp':
                current_price = client.get_last_price(pair=XRP)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(XRP, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'ada':
                current_price = client.get_last_price(pair=ADA)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(ADA, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'doge':
                current_price = client.get_last_price(pair=DOGE)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(DOGE, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'atom':
                current_price = client.get_last_price(pair=ATOM)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(ATOM, current_price)
                bot.send_message(call.message.chat.id, text)

            elif call.data == 'ltc':
                current_price = client.get_last_price(pair=LTC)
                text = "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:\n\n{} = {}$".format(LTC, current_price)
                bot.send_message(call.message.chat.id, text)

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
